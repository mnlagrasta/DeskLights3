#!/usr/bin/env perl

#TODO: Auth / security stuff?
#TODO: report errors based on http status codes?

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long;
use HTTP::Tiny;
use Path::Tiny;

use Env qw(DL3IP);

GetOptions(
    'ip=s'     => \my $ip,
    'x=i'        => \my $x_max,
    'y=i'        => \my $y_max,
    'verbose'  => \my $verbose,
    'help'     => sub { show_help() },
    'oi'       => \my $output_image,
);

$ip ||= $DL3IP;
show_help("Must have an IP") unless ( $ip );

my $base_url = 'http://' . $ip . '/';
my $command = shift;
my $param = shift || '';
show_help() unless length($command);

if ( $command eq 'frame' ) {
    # This needs to be a post, due to potential size
    do_post( 'setFrame', { h => $param } );
} elsif ( $command eq '0' || $command eq '1' || $command eq '2' ) {
    # if it is a number (within known range), use it to set the default pattern
    do_get( "setDefault?i=" . $command );
} elsif ( -r $command ) {
    # if it is a readable file, use it as an image based frame
    my $frame = image_frame($command);
    do_post( 'setFrame', { h => $frame } );
} else {
    # finally, just send it through to the server
    my $content = do_get($command . '?' . $param);
    print $content;
}

sub do_get {
    my $url = $base_url . shift;
    do_log($url);
    my $response = HTTP::Tiny->new->get($url);
    die("Failed to get url: $url") unless $response->{success};
    return $response->{content};
}

sub do_post {
    my $url = $base_url . shift;
    my $form_data = shift;
    my $response = HTTP::Tiny->new->post_form( $url, $form_data );
    die('Failed to get url: $url') unless $response->{success};
    do_log( $url, Dumper($form_data) );
    return 1;
}

sub show_help {
    my $in = shift;
    print <<EOF;

usage: dl [options] command
    --ip, -i	target ip address
    -x  maximum x id for grid (optional)
    -y  maximum y id for grid (optional)
    --verbose, -v	verbose output, will show http calls
    --help, -h	This help message

    The value of command will be interpreted in the following order:
        If it is a known command, it will be run (i.e. off, demo, frame);
        If it is a number (currently 0-2), it will be set as the default pattern id;
        If it is a valid file, it will use it as an image frame;
        Finally, it will send the cammand and params over http;

    The GD image library and Image::Resize Perl module are required if you
    are going to pass in an image to be used as a frame. This image can be
    of any type supported by GD. If this is missing, you will be informed upon
    execution. These are not required for any other functions.

    * Note: If the x and y params are passed, they will be used in the image_frame
    command in place of the getInfo call. This is good for testing and speed.

    Sample executions

        Turn off lights, set default pattern to 0:
        dl3 off

        Set default pattern to rainbow (id 1)
        dl3 1

        Set pixels by image:
        dl3 ~/awesome/image.jpg

        Setting hex colors for first five pixels:
        dl3 frame h=ffffff000000ff000000ff000000ff

        Sending a raw command to desk (see Arduino code for commands):
        dl3 "alert?h=ffffff&d=1000"

EOF
    if ($in) {
        die $in;
    }
    else {
        exit(0);
    }
}

# resize and convert supplied image to a "frame"
sub image_frame {
    # I did not want to force these requirements unless using this function.
    require JSON::Tiny;
    require Image::Resize;

    my $filename = shift;

    if (!(defined($x_max) && defined($y_max))) {
        my $info = JSON::Tiny::from_json(do_get('getInfo'));
        use Data::Dumper;
        print Dumper($info);
        do_log("getting pixels from image file: $filename");
        $x_max = $info->{x_max};
        $y_max = $info->{y_max};
    }

    my $image = Image::Resize->new($filename);
    my $new_image = $image->resize( $x_max + 1, $y_max + 1, 0 );

    if ($output_image) {
        my $out_name = $filename . '_output.jpg';
        do_log("Writing shrunken file $out_name");
        open(my $infile, '>', $out_name);
        print($infile, $new_image->jpeg());
        close($infile);
    }

    my $frame_data;
    for ( my $y = 0 ; $y <= $y_max ; $y++ ) {
        # Every other row must be collected in reverse order
        # The strip is continous and changes direction each row
        if ($y % 2) {
            for ( my $x = $x_max ; $x >= 0 ; $x-- ) {
                my $index = $new_image->getPixel( $x, $y );
                my ( $r, $g, $b ) = $new_image->rgb($index);
                $frame_data .= sprintf( "%02x%02x%02x,", $r, $g, $b );
            }
        } else {
            for ( my $x = 0 ; $x <= $x_max ; $x++ ) {
                my $index = $new_image->getPixel( $x, $y );
                my ( $r, $g, $b ) = $new_image->rgb($index);
                $frame_data .= sprintf( "%02x%02x%02x,", $r, $g, $b );
            }
        }
    }

    return $frame_data;
}

sub do_log {
    return unless $verbose;
    while ( my $out = shift ) {
        print $out . "\n";
    }
    return 1;
}
